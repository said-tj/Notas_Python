Las variables escritas en python, no pueden comenzar con números, pero estas si pueden terminar su nombre con un número.

Lo que hace una variable, es asignar un espacio dentro de la memoria física denl computador/servidor para después acceder al valor que le designamos a la variable.

Los argumentos son los valores que le pasamos a la función.

Un método es una función que se encuentra en un objeto.

Podemos encadenar los métodos por ejemplo: print(animal.strip().capitalize())

Las evaluaciones en el if, se hacen de arriba hacia abajo, por lo cual es muy importante el orden en como acomodamos las instrucciones.

Se pueden agregar tanto elif como se desee pero no es una buena práctica.

Los operadores lógicos se evaluan de izquierda a derecha, pero si se agregan parentesis entonces esas se evaluan primero.

Las operaciones de corto circuito son el orden en como se ponen y evaluan los operadores logicos, para reducir el costo computacional, es decir, el orden en como estan las tablas de verdad.

Un ciclo for nos sirve para iterar una lista de eventos, por ejemplo: crear un campo de datos, búscar elementos, realizar operaciones matemáticas, etc.

El método range() es un iterable, al igual que las listas, tuplas, strings.

Un for dentro de otro for, no es una práctica muy comun, sin embargo se puede utilizar por ejemplo para crear pares ordenados.

Si tenemos un for dentro de otro for, es decir un outer for y un inner foor entonces siempre se debe de cumplir primero la condición del inner for, para que después pueda cumplir la condición de outer for. 

Una función recibe aurgumentos y parámetros.

La variable que le pasamos como argumento a una función solo se puede ocupar dentro del contexto de la función (tipo mini local).

Cada vez que hacemos referencia a una variable dentro de una función decimos que estamos haciendo usos de sus parámetros.

Por el contrario, cada vez que llamamos a la función que deja de ser una variable y empieza a tener un valor, nos referimos como arguemntos.

En resumen, dentro de la función se llama parámetros y fuera de la función se llama argumentos.

Podemos tener parámetros opcionales, es decir, cuando definimos la función y en ella el parámetro de asignamos un valor (parametro_n = xyz) este valor lo va a tomar por default, siempre que nosotros al llamar a la función no le pasemos dicho argumento tomara el que definimos.

Para los argumentos nombrados, solo basta que al pasarle el arguemnto(s) a la función, lo igualemos al parámetro que deseamos que sea igual, sin importa el orden.

Para los kwargs se utiliza el ** el cual demanda que al pasar un argumento, este debe de estar definido a que parámetro va a ser asignado.

Return, permite manipular el resultado de una función para tomar la variable y poder devolverla cada vez que la necesitemos. 

Una variable definida fuera de una función se dice que esta en el contexto global.

Utilizar variables globales es una mala práctica.

Hay que tener cuidado con return pues esta inmediatamente detiene la ejecución de la función y va a retornar el valor para ser asignado a una variable cuando se llame a esa línea.

Los corchetes nos sirve para indicar donde comienza la lista, es decir guarda el contenido de la lista. Y entre cada elemento existe una coma que hace que separe elementos de la lista.

Una lista dentro e otra lista es una matriz.

Para crear una lista vacia solo basta con  a = []

La función list(), recibe como argumento un iterable, si lo dejamos vacio, entonces crea una lista vacia.

La función enumerate(), nos devuleve una tupla.

El método count() nos indica cuantas veces existe un elemento dentro de un objeto.

El método .remove() elimina elementos de una lista, pero en el dado caso de que exista más de un elemento con el mismo nombre, entonces, solo eliminara el primero, por lo cual se debe de contabilizar el número de elementos repetidos.

El método .pop(), en caso de no colocar nada en el argumento (posición a eliminar), entonces  elimina el último elemento de la lista.

El método .sort(), ordena los elementos númericos de una lista/array en forma ascendente.

La función sorted(), recibe como argumento un iterable, y esto devuelve una nueva lista, y no afectara el listado anterior.

Si un listado contiene otro listado o también pueden ser duplas, siempre y cuando el primer elemento sea un ordenable, lo va a ordenar.

Si solo vamos a ocupar una función lambda solo una unica vez y no utilizarla nunca más, entonces no hay ningún problema, es decir, no seria mala práctica.

